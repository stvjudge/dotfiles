---@module "lazy"
---@type LazySpec
return {
    {
        "folke/neoconf.nvim",
        cmd = "NeoConf",
        opts = {},
    },

    -- Nvim LSP config
    {
        "neovim/nvim-lspconfig",
        dependencies = {
            { "williamboman/mason.nvim", opts = {} },
            "williamboman/mason-lspconfig.nvim",
            "b0o/schemastore.nvim",
            "saghen/blink.cmp",
        },
        ft = {
            "dockerfile",
            "json",
            "lua",
            "markdown",
            "python",
            "go",
            "sh",
            "bash",
            "toml",
            "yaml",
            "yaml.docker-compose",
        },

        config = function(orm, no need to define vim.lsp.buf.format() here
                -- stylua: ignore start
                local buf_keymaps = {
                    {"n", "<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>",     "CodeAction"},
                    {"n", "<leader>cr", "<cmd>lua vim.lsp.buf.rename()<CR>",          "Rename"},
                    {"n", "<leader>q",  "<cmd>lua vim.diagnostic.setloclist()<CR>",   "Open diagnostics list" },
                    {"n", "K",          "<cmd>lua vim.lsp.buf.hover()<CR>",           "HoverDocumentation"},
                    {"n", "[d",         "<cmd>lua vim.diagnostic.goto_prev()<CR>",    "Go to previous diagnostic" },
                    {"n", "]d",         "<cmd>lua vim.diagnostic.goto_next()<CR>",    "Go to next diagnostic" },
                    {"n", "cr",         "<cmd>lua vim.lsp.buf.rename()<CR>",          "Rename"},
                    {"n", "gD",         "<cmd>lua vim.lsp.buf.declaration()<CR>",     "GotoDeclaration"},
                    {"n", "gI",         "<cmd>lua vim.lsp.buf.incoming_calls()<CR>",  "GottoIncomingCalls"},
                    {"n", "gO",         "<cmd>lua vim.lsp.buf.outgoing_calls()<CR>",  "GottoOutgoingCalls"},
                    {"n", "gd",         "<cmd>lua vim.lsp.buf.definition()<CR>",      "GotoDefinition"},
                    {"n", "gi",         "<cmd>lua vim.lsp.buf.implementation()<CR>",  "GotoImplementation"},
                    {"n", "gl",         "<cmd>lua vim.diagnostic.open_float()<CR>",   "Open floating diagnostic message" },
                    {"n", "go",         "<cmd>lua vim.lsp.buf.type_definition()<CR>", "GotoTypeDefinition"},
                    {"n", "gr",         "<cmd>lua vim.lsp.buf.references()<CR>",      "GotoReferences"},
                    {"n", "gs",         "<cmd>lua vim.lsp.buf.signature_help()<CR>",  "SignatureHelp"},
                }
                    -- stylua: ignore end

                    for _, map in ipairs(buf_keymaps) do
                        local modes = type(map[1]) == "table" and map[1] or { map[1] }
                        ---@diagnostic disable-next-line: param-type-mismatch
                        for _, mode in ipairs(modes) do
                            vim.keymap.set(mode, map[2], map[3], vim.tbl_extend("force", opts, { desc = map[4] }))
                        end
                    end
                end,
            })

            -- Diagnostic
            vim.diagnostic.config({
                float = {
                    virtual_text = true,
                    signs = true,
                    underline = true,
                    update_in_insert = false,
                    severity_sort = true,
                },
            })

            -- Setup LSP servers
            mason_lspconfig.setup_handlers({
                function(server)
                    lspconfig[server].setup({
                        on_attach = function()
                            -- Additional on_attach logic
                        end,
                    })
                end,
                -- Bash lang server
                ["bashls"] = function()
                    lspconfig.bashls.setup({
                        capabilities = capabilities,
                        settings = {
                            bashIde = {
                                -- Disable shellcheck in bash-language-server. It conflicts with linter settings.
                                shellcheckPath = "",
                            },
                        },
                    })
                end,

                -- Dockerfile lang server
                ["dockerls"] = function()
                    lspconfig.dockerls.setup({
                        capabilities = capabilities,
                        settings = {}
                    })
                end,

                -- Docker-compose lang server
                ["docker_compose_language_service"] = function()
                    lspconfig.docker_compose_language_service.setup({
                        capabilities = capabilities,
                    })
                end,

                -- Lua lang server
                ["lua_ls"] = function()
                    lspconfig.lua_ls.setup({
                        capabilities = capabilities,
                        settings = {
                            Lua = {
                                runtime = {
                                    version = "LuaJIT",
                                },
                                diagnostics = {
                                    globals = { "vim" },
                                },
                                workspace = {
                                    library = {
                                        vim.env.VIMRUNTIME,
                                    },
                                },
                            },
                        },
                    })
                end,

                -- JSON lang server
                ["jsonls"] = function()
                    lspconfig.jsonls.setup({
                        capabilities = capabilities,
                        settings = {
                            json = {
                                schemas = schemastore.json.schemas(),
                                validate = { enable = true },
                            },
                        },
                    })
                end,
                -- YAML lang server
                ["yamlls"] = function()
                    lspconfig.yamlls.setup({
                        capabilities = capabilities,
                        settings = {
                            yaml = {
                                schemaStore = {
                                    enable = false,
                                    url = "",
                                },
                                schemas = schemastore.yaml.schemas(),
                                validate = true,
                                completion = true,
                                hover = true,
                            },
                        },
                    })
                end,
                -- GO lang server
                ["gopls"] = function()
                    lspconfig.gopls.setup({
                        capabilities = capabilities,
                    })
                end,
            })

            require("lspconfig.ui.windows").default_options.border = "single"
            vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, {
                border = "single",
            })
            vim.diagnostic.config({
                float = { border = "single" },
            })
        end,
        -- stylua: ignore start
        keys = {
            { "<leader>li", ":LspInfo<CR>",                                  desc = "LSP information" },
            { "<leader>lr", ":lua vim.lsp.buf.rename()<CR>",                 desc = "LSP symbol rename" },
            { "<leader>ls", ":lua vim.lsp.buf.signature_help()<CR>",         desc = "LSP signature help" },
            { "<leader>lk", ":lua vim.lsp.buf.signature_help()<CR>",         desc = "LSP signature help" },
            { "<leader>lf", ":lua vim.lsp.buf.format({ async = true })<CR>", desc = "LSP format" },
            { "<leader>ld", ":lua vim.diagnostic.open_float()<CR>",          desc = "Open diagnostics" },
            { "<leader>lq", ":lua vim.diagnostic.setloclist()<CR>",          desc = "Quickfix diagnostics" },
            { "<leader>la", ":FzfLua lsp_code_actions<CR>",                  desc = "LSP code actions" },
            { "K",          ":lua vim.lsp.buf.hover()<CR>",                  desc = "LSP Hover" },
            { "gD",         ":lua vim.lsp.buf.declaration()<CR>",            desc = "LSP goto declaration" },
            { "gd",         ":FzfLua lsp_definitions<cr>",                   desc = "LSP goto definition" },
            { "gr",         ":FzfLua lsp_references<cr>",                    desc = "LSP goto references" },
            { "gi",         ":FzfLua lsp_implementations<cr>",               desc = "LSP goto implementations" },
            { "go",         ":FzfLua lsp_document_symbols<CR>",              desc = "LSP find document symbols" },
            { "gO",         ":FzfLua lsp_workspace_symbols<CR>",             desc = "LSP find workspace symbols" },
            { "g[",         ":lua vim.diagnostic.goto_prev()<CR>",           desc = "goto prev diagnostic" },
            { "g]",         ":lua vim.diagnostic.goto_next()<CR>",           desc = "goto next diagnostic" },
        },
        -- stylua: ignore end
    },
}
