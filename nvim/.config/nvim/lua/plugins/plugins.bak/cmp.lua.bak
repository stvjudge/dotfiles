return {
    {
        "hrsh7th/nvim-cmp",
        event = "InsertEnter",
        dependencies = {
            -- Snippet Engine & its associated nvim-cmp source
            {
                "L3MON4D3/LuaSnip",
                build = (function()
                    if vim.fn.has("win32") == 1 or vim.fn.executable("make") == 0 then
                        return
                    end
                    return "make install_jsregexp"
                end)(),
                dependencies = {
                    {

                        "rafamadriz/friendly-snippets",
                        config = function()
                            require("luasnip.loaders.from_vscode").lazy_load()
                        end,
                    },
                },
            },
            "saadparwaiz1/cmp_luasnip",
	    -- "onsails/lspkind.nvim",
            "hrsh7th/cmp-nvim-lsp",
            "hrsh7th/cmp-path",
            "hrsh7th/cmp-buffer",
            "hrsh7th/cmp-cmdline",
            "hrsh7th/cmp-nvim-lua",
        },
        config = function()
            -- See `:help cmp`
            
            local luasnip = require("luasnip")
            luasnip.config.setup({})
	    -- local lspkind = require('lspkind')

	    local kind_icons = {
		  Text = "",
		  Method = "󰆧",
		  Function = "󰊕",
		  Constructor = "",
		  Field = "󰇽",
		  Variable = "󰂡",
		  Class = "󰠱",
		  Interface = "",
		  Module = "",
		  Property = "󰜢",
		  Unit = "",
		  Value = "󰎠",
		  Enum = "",
		  Keyword = "󰌋",
		  Snippet = "",
		  Color = "󰏘",
		  File = "󰈙",
		  Reference = "",
		  Folder = "󰉋",
		  EnumMember = "",
		  Constant = "󰏿",
		  Struct = "",
		  Event = "",
		  Operator = "󰆕",
		  TypeParameter = "󰅲",
	     }

            local cmp = require("cmp")

            cmp.setup ({
                snippet = {
                    expand = function(args)
                        luasnip.lsp_expand(args.body)
                    end,
                },

		view = {
			entries = { name = "custom", selection_order = "near_cursor" }
		},

                formatting = {
                    format = function(entry, vim_item)
			local lspkind_ok, lspkind = pcall(require, "lspkind")
			if not lspkind_ok then
		        -- Kind icons
				vim_item.kind = string.format('%s %s', kind_icons[vim_item.kind], vim_item.kind)
				-- set neme for each source
				vim_item.menu = ({
				    buffer = "[Buff]",
				    nvim_lsp = "[LSP]",
				    luasnip = "[LuaSnip]",
				    nvim_lua = "[Lua]",
				})[entry.source.name]
				return vim_item
			else
				return lspkind.cmp_format()(entry, vim_item)
			end
                    end,
                },

                preselect = cmp.PreselectMode.Item,
                completion = { completeopt = "menu,menuone,noinsert" },
                --window = {
                --completion = cmp.config.window.bordered(),
                --documentation = cmp.config.window.bordered(),
                --},
                -- For an understanding of why these mappings were
                -- chosen, you will need to read `:help ins-completion`
                --
                -- No, but seriously. Please read `:help ins-completion`, it is really good!
                mapping = cmp.mapping.preset.insert({
                    -- Select the [n]ext item
                    ["<C-n>"] = cmp.mapping.select_next_item(),
                    -- Select the [p]revious item
                    ["<C-p>"] = cmp.mapping.select_prev_item(),
                    -- Scroll the documentation window [b]ack / [f]orward
                    ["<C-b>"] = cmp.mapping.scroll_docs(-4),
                    ["<C-f>"] = cmp.mapping.scroll_docs(4),
                    -- Accept ([y]es) the completion.
                    --  This will auto-import if your LSP supports it.
                    --  This will expand snippets if the LSP sent a snippet.
                    ["<C-y>"] = cmp.mapping.confirm({ select = true }),
                    -- Manually trigger a completion from nvim-cmp.
                    --  Generally you don't need this, because nvim-cmp will display
                    --  completions whenever it has completion options available.
                    ["<C-Space>"] = cmp.mapping.complete({}),
                    -- Think of <c-l> as moving to the right of your snippet expansion.
                    --  So if you have a snippet that's like:
                    --  function $name($args)
                    --    $body
                    --  end
                    --
                    -- <c-l> will move you to the right of each of the expansion locations.
                    -- <c-h> is similar, except moving you backwards.
                    ["<C-l>"] = cmp.mapping(function()
                        if luasnip.expand_or_locally_jumpable() then
                            luasnip.expand_or_jump()
                        end
                    end, { "i", "s" }),
                    ["<C-h>"] = cmp.mapping(function()
                        if luasnip.locally_jumpable(-1) then
                            luasnip.jump(-1)
                        end
                    end, { "i", "s" }),

                    -- testing Tab to move next snippet and S-Tab to move backwards
                    ["<Tab>"] = cmp.mapping(function(fallback)
                        if cmp.visible() then
                            cmp.select_next_item()
                        elseif luasnip.expand_or_jumpable() then
                            luasnip.expand_or_jump()
                        else
                            fallback()
                        end
                    end, { "i", "s" }),

                    ["<S-Tab>"] = cmp.mapping(function(fallback)
                        if cmp.visible() then
                            cmp.select_prev_item()
                        elseif luasnip.jumpable(-1) then
                            luasnip.jump(-1)
                        else
                            fallback()
                        end
                    end, { "i", "s" }),

                    -- test enter to ConfirmBehavior
                    ["<CR>"] = cmp.mapping.confirm({
                        behavior = cmp.ConfirmBehavior.Replace,
                        select = false,
                    }),
                    -- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
                    --    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
                }),
                sources = {
                    { name = "nvim_lsp" },
                    { name = "luasnip" },
                    { name = "path" },
                    { name = "nvim_lua" },
                    { name = "buffer", keyword_length = 1 },
                },
            })
        end,
    },
}
